"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.css = void 0;

var _lodash = _interopRequireDefault(require("lodash.get"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var keys = {
  fontSize: 'fontSizes',
  fontFamily: 'fonts',
  fontWeight: 'fontWeights',
  letterSpacing: 'letterSpacings'
};

var setKeys = function setKeys(key, props) {
  props.forEach(function (prop) {
    keys[prop] = key;
  });
};

setKeys('colors', ['color', 'backgroundColor', 'borderColor']);
setKeys('space', ['margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'm', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py']);
setKeys('sizes', ['width', 'height', 'minWidth', 'maxWidth', 'minHeight', 'maxHeight']);
setKeys('borders', ['border', 'borderTop', 'borderRight', 'borderBottom', 'borderLeft']);
setKeys('borderWidths', ['borderWidth']);
setKeys('borderStyles', ['borderStyle']);
setKeys('radii', ['borderRadius']);
setKeys('zIndices', ['zIndex']);

var getScaleValue = function getScaleValue(scale, x) {
  if (typeof x !== 'number' || x >= 0) return (0, _lodash["default"])(scale, x, x);
  var abs = Math.abs(x);
  var n = (0, _lodash["default"])(scale, abs, abs);
  return n * -1;
};

var css = function css(styles) {
  return function (theme) {
    var result = {};

    for (var key in styles) {
      var value = styles[key];

      if (value && _typeof(value) === 'object') {
        result[key] = css(value)(theme);
        continue;
      }

      result[key] = getScaleValue((0, _lodash["default"])(theme, keys[key], {}), value);
    }

    return result;
  };
};

exports.css = css;
var _default = css;
exports["default"] = _default;